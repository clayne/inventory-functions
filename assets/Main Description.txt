This is an update of the excellent 'Inventory Functions' SKSE plugin, originally by Quad2Core, and found [url=http://www.nexusmods.com/skyrim/mods/53432]here[/url].

The original plugin was written for SKSE 1.7.0, and some of the internal SKSE classes have changed slightly between then and the current 1.7.3.  This meant that, sadly, the original plugin would no longer work with the latest SKSE.

The good news is that Q2C included a source file, so I was able to update the relevant sections and get it working again.  The bad news is that I was unable to get in touch with the original author to either submit my changes, or offer to host an updated version (I sent a message, but it looks like they have been absent from the Nexus since late 2015).

However, the original file [i]did[/i] give permission for the plugin to be re-used.  After much thought, I contacted a Nexus admin, and asked if it would be considered acceptable for me to host this updated version.  They agreed, and so here is the updated version, free for people to use.

I should point out that the source file on the original page was only the v1 of the plugin, so didn't include any of the more exciting newer functions (for poisoning).  With a bit of experimenting, I've figured out how to recreate those, and they're available in v3.02.  I've also added a few new functions of my own along the way - here's what is currently in the script:


[line]

[center][color=#9900ff][size=4][b]Container Inventory Functions[/b][/size][/color][/center]

[font=Courier New]
[color=#00ff00]; Q2C's original functions, updated for SKSE 1.7.3[/color]
int Function     GetNumItemsWithKeyword(ObjectReference akObjRef, Keyword akKeyword)
Form Function    GetNthFormWithKeyword(ObjectReference akObjRef, Keyword akKeyword, int aiItemIndex)

[color=#00ff00]; added by Kalivore - type is the SKSE itemType (eg 26 for armour, or 46 for potion)
; full list at http://www.creationkit.com/index.php?title=GetType_-_Form[/color]
int Function     GetNumItemsOfType(ObjectReference akObjRef, int aiType)
Form Function    GetNthFormOfType(ObjectReference akObjRef, int aiType, int aiItemIndex)
[/font]

[line]

[center][color=#9900ff][size=4][b]Poison Functions[/b][/size][/color][/center]

[font=Courier New]
[color=#00ff00]; Q2C's original poison functions, updated for SKSE 1.7.3
; Note a slight change in format: Worn_PoisonWeapon has become WornObjectSetPoison,
; Worn_GetPoison has become WornObjectGetPoisonCharges etc

; Valid Hand Slot:
; 0 - Left
; 1 - Right[/color]

[color=#00ff00]; this is already done by SKSE, so just forward on to that version[/color]
Potion Function WornObjectGetPoison(Actor akActor, int aiHandSlot, int aiSlotMask)

int Function 	WornObjectSetPoison(Actor akActor, int aiHandSlot, int aiSlotMask, Potion akPoison, int aiCharges = 1)
[color=#00ff00]{
Applies akPoison to weapon in aiHandSlot.  Note the item MUST be a weapon, or the function will fail and return -1
Returns: The number of poison charges the weapon now has (which should be the same as aiCharges)
		or -1 if unsuccessful
}[/color]

Function 	WornObjectRemovePoison(Actor akActor, int aiHandSlot, int aiSlotMask)
[color=#00ff00]{
Remove the poison from the weapon in aiHandSlot
}[/color]

int Function 	WornObjectGetPoisonCharges(Actor akActor, int aiHandSlot, int aiSlotMask)
[color=#00ff00]{
Get the number of poison charges on the weapon in aiHandSlot
Returns: The number of charges, or -1 if unsuccessful for any reason
		(eg the item is not a weapon, or no poison applied)
}[/color]

int Function	WornObjectSetPoisonCharges(Actor akActor, int aiHandSlot, int aiSlotMask, int aiCharges = 1)
[color=#00ff00]{
Set the number of poison charges on the weapon in aiHandSlot
Returns: The number of poison charges now on the weapon in aiHandSlot (which should be the same as aiCharges)
		or -1 if unsuccessful for any reason (eg the item is not a weapon, or no poison applied)
}[/color]

[color=#00ff00]; this is already done by SKSE, so just forward on to that version[/color]
Potion Function GetPoison(ObjectReference akObjRef)

int Function 	SetPoison(ObjectReference akObjRef, Potion akPoison, int aiCharges = 1)
[color=#00ff00]{
Applies akPoison to akObjRef.  Note the item MUST be a weapon, or the function will fail and return -1
Returns: The number of poison charges the weapon now has (which should be the same as aiCharges)
		or -1 if unsuccessful
}[/color]

Function RemovePoison(ObjectReference akObjRef)
[color=#00ff00]{
Remove the poison from the weapon akObjRef
}[/color]

int Function 	GetPoisonCharges(ObjectReference akObjRef)
[color=#00ff00]{
Get the number of poison charges on akObjRef
Returns: The number of charges, or -1 if unsuccessful for any reason
		(eg the item is not a weapon, or no poison applied)
}[/color]

int Function	SetPoisonCharges(ObjectReference akObjRef, int aiCharges = 1)
[color=#00ff00]{
Set the number of poison charges on akObjRef
Returns: The number of poison charges now on the weapon in aiHandSlot (which should be the same as aiCharges)
		or -1 if unsuccessful for any reason (eg the item is not a weapon, or no poison applied)
}[/color]


[color=#00ff00]; These are all just shortcuts to the full WornObject versions above, sending aiSlotMask as 0
Potion Function	WornGetPoison(Actor akActor, int aiHandSlot)
int Function 	WornSetPoison(Actor akActor, int aiHandSlot, Potion poison, int aiCharges = 1)
Function	WornRemovePoison(Actor akActor, int aiHandSlot)
int Function 	WornGetPoisonCharges(Actor akActor, int aiHandSlot)
int Function  	WornSetPoisonCharges(Actor akActor, int aiHandSlot, int aiCharges = 1)



[/font]

[line]

[center][color=#9900ff][size=4][b]Ammo Functions[/b][/size][/color][/center]

[font=Courier New]
[color=#00ff00]; OK, not really specifically to do with Inventories, but I needed these for another mod of mine and they don't exist in current SKSE[/color]
Function SetIsBolt(Ammo akAmmo, bool abIsBolt)
[color=#00ff00]{
Sets whether this ammo is a bolt
}[/color]

Function SetProjectile(Ammo akAmmo, Projectile akProjectile)
[color=#00ff00]{
Sets the projectile associated with this ammo
[color=#ff0000]--WARNING!!-- Highly untested! >:$[/color]
}[/color]

Function SetDamage(Ammo akAmmo, float afDamage)
[color=#00ff00]{
Sets the base damage of this ammo
}[/color]
[/font]

[line]

[center][color=#9900ff][size=4][b]Spell inventory Functions[/b][/size][/color][/center]

[color=#ff0000][size=3][b][center]NOTE - Important Changes in v3!![/center][/b][/size][/color]
[color=#ff0000]As of v3, the Spell-related functions in here will now [b]only[/b] list [i]explicit[/i] Spells (ie items which have a Spell Type of "Spell" in the Creation Kit).  This means they will ignore magic marked as Abilities, like those added by Perks.[/color]
Many thanks to user [url=http://www.nexusmods.com/skyrim/users/7280154]irswat[/url] for helping me to investigate and realise the difference between these.  As a result, the default behaviour of ActorGetSpells and ActorBaseGetSpells have changed, and will now return a full list of Spells if you call them with no specific criteria (this makes a lot more sense to me, and was how I wanted to do it originally, but the Abilities were getting in the way).

[font=Courier New]
[color=#00ff00]; Some spell-related Constants for use with these functions (all Global, so you can call them as _Q2C_Functions.SpellSchoolAny() )[/color]

[color=#00ff00]; Valid spell School values[/color]
string Function SpellSchoolAny()
[color=#00ff00]{returns an empty string ""}[/color]
string Function SpellSchoolAlteration()
[color=#00ff00]{returns "Alteration"}[/color]
string Function SpellSchoolConjuration()
[color=#00ff00]{returns "Conjuration"}[/color]
string Function SpellSchoolDestruction()
[color=#00ff00]{returns "Destruction"}[/color]
string Function SpellSchoolIllusion()
[color=#00ff00]{returns "Illusion"}[/color]
string Function SpellSchoolRestoration()
[color=#00ff00]{returns "Restoration"}[/color]

[color=#00ff00]; useful preset spell Level values[/color]
int Function SpellLevelAny()
[color=#00ff00]{returns -1}[/color]
int Function SpellLevelNovice()
[color=#00ff00]{returns 0 (all Novice spells I found were level 0)}[/color]
int Function SpellLevelApprentice()
[color=#00ff00]{returns 25}[/color]
int Function SpellLevelAdept()
[color=#00ff00]{returns 50}[/color]
int Function SpellLevelExpert()
[color=#00ff00]{returns 75}[/color]
int Function SpellLevelMaster()
[color=#00ff00]{returns 100}[/color]

[color=#00ff00]; Valid Level Comparison values (only applied if aiLevel >= 0):[/color]
int Function SpellLevelComparisonLt()
[color=#00ff00]{returns -2. Means spell level must be lower than specified aiLevel to be counted}[/color]
int Function SpellLevelComparisonLtEq()
[color=#00ff00]{returns -1. Means spell level must be less than or equal to specified aiLevel to be counted}[/color]
int Function SpellLevelComparisonEq()
[color=#00ff00]{returns 0. Means spell level must be equal to specified aiLevel to be counted}[/color]
int Function SpellLevelComparisonGtEq()
[color=#00ff00]{returns 1. Means spell level must be equal to or greater than specified aiLevel to be counted}[/color]
int Function SpellLevelComparisonGt()
[color=#00ff00]{returns 2. Means spell level must be greater than specified aiLevel to be counted}[/color]



Spell[] Function    ActorGetSpells(Actor akActor, Keyword akKeyword = None, string asSchool = "", int aiLevel = -1, int aiLevelComparison = 1, bool abSearchBase = true)
[color=#00ff00]{
Scans the MagicEffects of the Actor's spells, adding the Spell to the returned array if the MagicEffect matches the criteria.
Use the default values to ignore that condition (eg sending asSchool as "" means 'of any School')
NOTE: as of v3, sending just the akActor (or sending all additional arguments as their default values) will now return ALL spells the Actor knows - rather than an empty list as before
Optionally will also check through the relevant ActorBase (which is more likely to be the one with the spells)
}[/color]

Spell[] Function    ActorBaseGetSpells(ActorBase akActorBase, Keyword akKeyword = None, string asSchool = "", int aiLevel = -1, int aiLevelComparison = 1)
[color=#00ff00]{
Scans the MagicEffects of the Actor's spells, adding the Spell to the returned array if the MagicEffect matches the criteria.
Use the default values to ignore that condition (eg sending asSchool as "" means 'of any School')
NOTE: as of v3, sending just the akActorBase (or sending all additional arguments as their default values) will now return ALL spells set on the ActorBase - rather than an empty list as before
}[/color]

Shout[] Function    ActorBaseGetShouts(ActorBase akActorBase, Keyword akKeyword = None)
[color=#00ff00]{
Returns an array of Shouts that match the specified Keyword.
}[/color]

[line]
[color=#00ff00]; Additional spell-checking Functions
; These are included for convenience.  They use the same criteria as the spell-listing functions above
; (and actually, all they do is just call the corresponding function, and return [b]true[/b] if the resulting array has at least one entry)[/color]

bool Function    ActorHasSpell(Actor akActor, Keyword akKeyword = None, string asSchool = "", int aiLevel = -1, int aiLevelComparison = 1, bool abSearchBase = true)
[color=#00ff00]{
Scans the MagicEffects of the Actor's spells, returning true at the first one that matches any of the supplied criteria.
NOTE: as of v3, sending just the akActor (or sending all additional arguments as their default values) will now return TRUE - rather than FALSE as before
Optionally will also check through the relevant ActorBase (which is more likely to be the one with the spells)
}[/color]

bool Function    ActorBaseHasSpell(ActorBase akActorBase, Keyword akKeyword = None, string asSchool = "", int aiLevel = -1, int aiLevelComparison = 1)
[color=#00ff00]{
Scans the MagicEffects of the ActorBase's spells, returning true at the first one that matches any of the supplied criteria.
NOTE: as of v3, sending just the akActorBase (or sending all additional arguments as their default values) will now return TRUE - rather than FALSE as before
}[/color]

bool Function    ActorBaseHasShout(ActorBase akActorBase, Keyword akKeyword)
[color=#00ff00]{
Scans the ActorBase's shouts, returning true at the first one that matches the specified Keyword.
}[/color]

[line]
[color=#00ff00]; Additional, now-DEPRECATED Spell and Keyword Functions
; These are now deprecated, and may be REMOVED in future versions.
; Please switch to using the generic equivalents above (which is all these fuctions do now - 
; just call the generic version with correct arguments, and pass back the result)[/color]

bool Function    ActorHasSpellSchool(Actor akActor, string asSchool, bool abSearchBase)
[color=#00ff00]{
OBSOLETE - now just a pass-through to the main ActorHasSpell, with relevant default vals
}[/color]

bool Function    ActorBaseHasSpellSchool(ActorBase akActorBase, string asSchool)
[color=#00ff00]{
OBSOLETE - now just a pass-through to the main ActorBaseHasSpell, with relevant default vals
}[/color]


bool Function    ActorHasSpellKeyword(Actor akActor, Keyword akKeyword, bool abSearchBase)
[color=#00ff00]{
OBSOLETE - now just a pass-through to the main ActorHasSpell, with relevant default vals
}[/color]

bool Function    ActorBaseHasSpellKeyword(ActorBase akActorBase, Keyword akKeyword)
[color=#00ff00]{
OBSOLETE - now just a pass-through to the main ActorBaseHasSpell, with relevant default vals
}[/color]
[/font]
[line]

[b][color=#ff0000][size=3]A Note about checking Spell Levels[/size][/color][/b]

If you supply a Level argument to the functions (eg 25 for Apprentice-level spells), the plugin will only check the FIRST Magic Effect on each spell for this.  Additionally, if testing for level 0 (Novice), the Magic Effect [i]must[/i] have a School assigned to it to be counted.

Explanation: [spoiler]
This is because spells can have many Effects assigned to them. The additional effects are usually enabled by perks: eg the Intense Flames effect on the Adept-level Fireball spell.  Since you need the Perk to unlock it, the Intense Flames effect actually has a level of 0 - which would cause trouble if you were looking for "spells of Apprentice level or less", and you got the Fireball spell back because its second effect is level 0.  

Furthermore (and regrettably), the vanilla game actually assigns Novice spells (eg Flames) a level of 0 - which is the default level, and used by a lot of 'maintenance effect'-type spells (ie, the sort of Magic Effect you apply with a Cloak spell to nearby NPCs).  Thankfully, these effects are also unlikely to have a Magic School assigned to them, so by testing the the effect [i]does[/i] have a school, it means we should only get 'proper' spells returned by the functions.
[/spoiler]


Some example code for usage - the first function is taken directly from the original mod page:

[font=Courier New]
import _Q2C_Functions

ObjectReference Property PlayerRef Auto
Keyword Property VendorItemPotion Auto

Function ReWeightPotions()
  int PotionIndex = GetNumItemsWithKeyword(PlayerRef, VendorItemPotion)
  While(PotionIndex > 0)
    PotionIndex -= 1
    Form potion = GetNthFormWithKeyword(PlayerRef, VendorItemPotion, PotionIndex)
    potion.SetWeight(0.0)
  endWhile
endFunction



Actor Property SomeEnemy Auto
Keyword Property MagicDamageFire Auto

Function CheckEnemyHasFireSpell()
  [color=#00ff00]  ; just send the Keyword argument, and leave all others at default[/color]
  bool hasFire = ActorHasSpell(SomeEnemy, MagicDamageFire)
  if (hasFire)
    Debug.Trace("The enemy has at least one Fire spell")
  else
    Debug.Trace("Well at least they won't set us on fire...")
  endIf
endFunction



Actor Property SomeAlly Auto

Function CheckAllyHasRestorationSpell()
  [color=#00ff00]  ; set Keyword argument to None (meaning 'don't match Keywords'), specify the School, and leave all others at default[/color]
  bool hasRestorationSpell = ActorHasSpell(SomeAlly, None, "Restoration")
  if (hasRestorationSpell)
    Debug.Trace("Restoration IS a perfectly valid school of magic")
  else
    Debug.Trace("Guess our ally won't be doing any healing...")
  endIf
endFunction



Actor Property PlayerRef Auto

Function ListPlayerSpells()
[color=#00ff00]  ; just send the Actor argument, and leave all others at defaults, to get a full list of spells the actor knows[/color]
  Spell[] actorAllSpells = ActorGetSpells(PlayerRef)
  int spellIndex = 0
  Report("Player has " + actorAllSpells.Length + " spells of any sort")
  while (spellIndex < actorAllSpells.Length)
    Spell currentSpell = actorAllSpells[spellIndex]
    Debug.Trace("Spell " + spellIndex + ": " + currentSpell.GetName())
    spellIndex += 1
  endWhile
endFunction
[/font]


[center][color=#1e84cc][b][size=3]I am just the updater of the original work - all credit for this is due to Quad2Core[/size][/b].[/color][/center]
As per their original wishes:
[quote]Feel free to package this plugin with your own mods and use it for your own projects.
Please just mention me (ie Quad2Core) in a footnote somewhere.

All Credits are going to the SKSE Team![/quote]I hope other people can find as much excellent use for these as I have!  Oh - and go give Quad2Core some kudos! :)